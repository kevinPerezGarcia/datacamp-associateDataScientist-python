---
title: "DataFrame"
author: "Kevin Pérez García"
output: html
---

# Librerías
```{python}
import numpy as np
import pandas as pd
from pprint import pprint
```

# Componentes de un DataFrame: 14 atributos

Asumiendo la existencia de un DataFrame:

```{python}
data = {
    "name": ["Bella", "Charlie", "Lucy", "Cooper", "Max", "Stella", "Bernie"],
    "breed": ["Labrador", "Poodle", "Chow Chow", "Schnauzer", "Labrador", "Chihuahua", "St. Bernard"],
    "color": ["Brown", "Black", "Brown", "Gray", "Black", "Tan", "White"],
    "height_cm": [56, 43, 46, 49, 59, 18, 77],
    "weight_kg": [24, 24, 24, 17, 29, 2, 74],
    "date_of_birth": ["2013-07-01", "2016-09-16", "2014-08-25", "2011-12-11", "2017-01-20", "2015-04-20", "2018-02-27"]
}

df = pd.DataFrame(data, index=["obs1", "obs2", "obs3", "obs4", "obs5", "obs6", "obs7"])

print(df)
```

Los componentes de un DataFrame son:

```{python}
print(df.empty) # Solo lectura
print(df.ndim) # Solo lectura
print(df.axes) # Solo lectura
print(df.columns) # Modificable
print(df.dtypes) # Solo lectura
print(df.index) # Modificable
print(df.values) # Solo lectura
print(df.shape) # Solo lectura
print(df.size) # Solo lectura
print(".at", ".iat", ".loc", ".iloc") # Solo lectura
```

# Exploración de un DataFrame

## Base de datos de prueba
```{python}
import pandas as pd
df = pd.read_csv('https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv')
```

## Revisar la extensión DataWrangler en VSCode
```{python}
print(df.head())
```

## Llamando a sus atributos y a 3 métodos
* Llamando a sus atributos
* Llamando a los métodos `info()`m `.head()`, `.tail()`

```{python}
print(df.info())
print(df.head())
print(df.tail())
```

# Creación y eliminación de un DataFrame

## Creación

Un DataFrame se crea como una instancia de la clase `DataFrame` de Pandas. Veamos su documentación.

Visualmente un DataFrame muestra 3 de sus 14 componentes: columns, values, index. Así, ¿debemos buscar un objeto que capture estos 3 elementos?

De las 4 estructuras de datos nativas de Python, ¿cuál facilita la creación de un DataFrame?
* Tuplas: Podría capturar los valores de las columnas, pero cómo indicar cuál es el nombre de la columna.
* Listas: Lo mismo que las tuplas.
* Diccionarios: Las claves del diccionario podrían capturar los nombres de las columnas y ¿los valores del diccionario capturarían sólo un valor de las columnas?
* Conjuntos: Capturarían los valores de las columnas, pero los conjuntos no permiten valores repetidos ni el orden.

Podríamos combinar un diccionario y una lista o tupla. Los DataFrames se crean a partir de un diccionario de listas. Así las claves del diccionario capturan los nombres de las columnas y pasamos listas de valores de las columnas a los valores de los diccionarios.

### Crear un DataFrame vacío

```{python}
df = pd.DataFrame()

print(df)
print(df.empty)
```

¿Cómo le añadimos valores? Mediante el método `.at`

### Crear un DataFrame con valores

1. **Desde una lista de listas**:
```{python}
import pandas as pd

data = [
    ['Ana', 23, 'Madrid'],
    ['Luis', 35, 'Barcelona'],
    ['Carlos', 45, 'Valencia']
]

df = pd.DataFrame(data, columns=['Nombre', 'Edad', 'Ciudad'])
print(df)
```

2. **Desde una matriz NumPy**:
```{python}
data = np.array([
    ['Ana', 23, 'Madrid'],
    ['Luis', 35, 'Barcelona'],
    ['Carlos', 45, 'Valencia']
])

df = pd.DataFrame(data, columns=['Nombre', 'Edad', 'Ciudad'])
print(df)
```

### Crear un DataFrame con valores y columnas

**Desde un diccionario de listas**:
```{python}
data = {
    'Nombre': ['Ana', 'Luis', 'Carlos'],
    'Edad': [23, 35, 45],
    'Ciudad': ['Madrid', 'Barcelona', 'Valencia']
}

df = pd.DataFrame(data)
print(df)
```

1. **Desde una lista de diccionarios**:
```{python}
data = [
    {'Nombre': 'Ana', 'Edad': 23, 'Ciudad': 'Madrid'},
    {'Nombre': 'Luis', 'Edad': 35, 'Ciudad': 'Barcelona'},
    {'Nombre': 'Carlos', 'Edad': 45, 'Ciudad': 'Valencia'}
]

df = pd.DataFrame(data)
print(df)
```

### ¿Y los índices?

```{python}
index=["obs1", "obs2", "obs3", "obs4", "obs5", "obs6", "obs7"]
df = pd.DataFrame(data=data, index=index)
```

**Usando el método `set_index` después de crear el DataFrame**:
```{python}
df.set_index('ID', inplace=True)
print(df)
```

## Eliminación

### De un objeto en memoria
```{python}
del df  # Elimina el DataFrame df de la memoria
```

### De todos los objetos en memoria
**Cerrar y reiniciar el intérprete**: Si estás utilizando un entorno interactivo como Jupyter Notebook o IPython, puedes reiniciar el kernel para comenzar de nuevo desde cero. Esto generalmente se hace desde el menú o con atajos de teclado específicos.


# Lectura y Escritura de bases de datos

Ambas opciones podrían requerir cambiar la dirección actual de trabajo, para ello se hace uso de:
```{python}
import os # Módulo sobre sistema operativo
os.chdir('/ruta/a/tud/directio') # Cambiar el directorio de trabajo
print(os.getcwd()) # Verificar el directorio de trabajo actual
```
También se pueden usar rutas relativas.

## Lectura

Desde un archivo CSV:
```{python}
df = pd.read_csv("df.csv")
print(new_dogs)
```

Desde una URL
```{python}
url = 'https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv'

df = pd.read_csv(url, index_col='Name')
print(df)
```

Desde Excel
```{python}
df = pd.read_excel('data.xlsx')
```

Desde Stata
```{python}
df = pd.read_stata('archivo.dta')
```

## Escritura

A un archivo csv
```{python}
df.to_csv("new_dogs_with_bmi.csv")
```

A un archivo pickle

A un archivo parquet

# Reformar DataFrames

## A forma larga (vertical)

`melt` es muy útil en pandas para reestructurar datos de ancho a largo, especialmente útil cuando se trabaja con múltiples variables que deben organizarse en un formato más estructurado para análisis y visualización.

Puedes ajustar los parámetros de `melt` según sea necesario, como especificar diferentes variables de identificación (`id_vars`) o cambiar nombres de columnas (`var_name`, `value_name`).

Base de datos de prueba
```{python}
import pandas as pd

# Crear DataFrame de ejemplo
data = {
    'codfam': [1, 2],
    'ingfam_2020': [50000, 60000],
    'ingfam_2021': [55000, 62000],
    'ingfam_2022': [60000, 65000]
}
df = pd.DataFrame(data)

# Muestra el DataFrame original
print("DataFrame original:")
print(df)
```

Usando el método `.melt()`
```{python}
# Reshape: convertir de ancho a largo usando melt
df_long = df.melt(
    id_vars=['codfam'],
    var_name='year', # Nombre de la variable implícita
    value_name='ingfam' # Nombre de la variable explícita
)

print(df_long)

# Ordenar por codfam y year (opcional)
df_long = df_long.sort_values(by=['codfam', 'year']).reset_index(drop=True)

# Mostrar el DataFrame reestructurado (largo)
print("\nDataFrame reestructurado (largo):")
print(df_long)
```

## A forma ancha (horizontal)

Base de datos de prueba
```{python}
import pandas as pd

# Crear un DataFrame de ejemplo
data_larga = {
    'ID': [1, 1, 2, 2, 3, 3],
    'Variable': ['A', 'B', 'A', 'B', 'A', 'B'],
    'Valor': [10, 20, 30, 40, 50, 60]
}

df_largo = pd.DataFrame(data_larga)
print("DataFrame en forma larga:")
print(df_largo)
```

Usando el método `.pivot()`
```{python}
# Pivotar el DataFrame
df_ancho = df_largo.pivot(
    index='ID',
    columns='Variable',
    values='Valor'
)#.reset_index()

print(df_ancho)

# Ordenar por codfam y year (opcional)
df_ancho = df_ancho.reset_index()

print(df_ancho)

# Restablecer los nombres de las columnas
df_ancho.columns.name = None

print("\nDataFrame en forma ancha:")
print(df_ancho)
```

# Combinación de DataFrames

## Combinación vertical

Bases de datos de prueba
```{python}
import pandas as pd

data1 = {
    'var1': ['A', 'B', 'C'],
    'hogar': [1001, 1002, 1003],
    'vivienda': [101, 102, 103],
    'conglome': [1, 2, 3]
}
df1 = pd.DataFrame(data1)

data2 = {
    'conglome': [4, 5, 6],
    'vivienda': [104, 105, 106],
    'hogar': [1004, 1005, 1006],
    'var1': ['D', 'E', 'F']
}
df2 = pd.DataFrame(data2)

data3 = {
    'conglome': [7, 8, 9],
    'vivienda': [107, 108, 109],
    'hogar': [1007, 1008, 1009],
    'var1': ['G', 'H', 'I']
}
df3 = pd.DataFrame(data3)
```

Usando la función `pd.concat()`
```{python}
df_combined = pd.concat([df1, df2, df3])
print(df_combined)

df_combined_ignoreIndex = pd.concat([df1, df2, df3], ignore_index=True)
print(df_combined_ignoreIndex)
```

::::: {.callout-note}
* Se puede apilar a la vez varias bases de datos.
* Las bases de datos deben presentar los mismos nombres de columnas.
* No importa el orden de las columnas en las bases de datos.
:::

## Combinación horizontal

Bases de datos de prueba
```{python}
data1 = {
    'conglome': [1, 2, 3],
    'vivienda': [101, 102, 103],
    'hogar': [1001, 1002, 1003],
    'var1': ['A', 'B', 'C']
}
df1 = pd.DataFrame(data1)

data2 = {
    'conglome': [1, 2, 3],
    'vivienda': [101, 102, 103],
    'hogar': [1001, 1002, 1003],
    'var2': ['X', 'Y', 'Z']
}
df2 = pd.DataFrame(data2)
```

Usando la función `.merge()`
```{python}
merged_df = pd.merge(
    df1, df2,
    on=['conglome', 'vivienda', 'hogar'],
    how='inner'
)

print(merged_df)
```

# columns

## Base de datos de prueba
```{python}
import pandas as pd

data = {
    "name": ["Bella", "Charlie", "Lucy", "Cooper", "Max", "Stella", "Bernie"],
    "breed": ["Labrador", "Poodle", "Chow Chow", "Schnauzer", "Labrador", "Chihuahua", "St. Bernard"],
    "color": ["Brown", "Black", "Brown", "Gray", "Black", "Tan", "White"],
    "height_cm": [56, 43, 46, 49, 59, 18, 77],
    "weight_kg": [24, 24, 24, 17, 29, 2, 74],
    "date_of_birth": ["2013-07-01", "2016-09-16", "2014-08-25", "2011-12-11", "2017-01-20", "2015-04-20", "2018-02-27"]
}

df = pd.DataFrame(data, index=["obs1", "obs2", "obs3", "obs4", "obs5", "obs6", "obs7"])

print("Base de datos de prueba: \n")
print(df)
```

## Accediendo a los nombres de las columnas
```{python}
df.columns
```

## Renombrando columnas

Mediante el atributo `.columns`
```{python}
# Atributos que se pueden modificar
df.columns = ['nombre', 'raza', 'color', 'altura', 'peso', 'nacimiento']

df.columns
```

Mediante el método `.rename()`
```{python}
df.rename(
    columns={
        'nombre': 'name',
        'raza': 'breed',
        'color': 'color',
        'altura': 'height_cm',
        'peso': 'weight_kg',
        'nacimiento': 'date_of_birth'
    },
    inplace=True
)
print(df)
```

## Etiquetando columnas

La asignación de etiquetas a variables no es una práctica común ni nativa en pandas, ya que pandas se centra más en la manipulación y análisis de datos que en la gestión de metadatos.

### Mediante diccionario

Puedes mantener un diccionario separado que mapea los nombres de las variables a sus etiquetas.

```{python}
import pandas as pd

# Ejemplo de DataFrame
data = {
    'pobre': [1, 0, 1, 0, 1],
    'ingreso': [100, 200, 150, 300, 250]
}
df = pd.DataFrame(data)

# Diccionario de etiquetas
labels = {
    'pobre': "Mix de pobreza",
    'ingreso': "Ingreso mensual"
}

# Función para acceder a las etiquetas
def get_label(column_name):
    return labels.get(column_name, "No label")

# Obtener la etiqueta de 'pobre'
print(get_label('pobre'))
```

## Crear y eliminar de columnas

### Crear columnas a partir de variables numéricas
```{python}
df["height_m"] = df["height_cm"] / 100
print(df)
```

```{python}
df["bmi"] = df["weight_kg"] / df["height_m"] ** 2
print(df.head())
```

### Eliminar columnas
```{python}
df.drop(["height_m"], axis=1, inplace=True)
df.drop(columns=["bmi"], inplace=True)

print(df)
```

### Crear variables a partir de variables textuales

**Extrayendo caracteres mediante el atributo `.str`**
```{python}
data = {
    'ubigeo': ['150101', '150102', '120203', '010101']
}
df = pd.DataFrame(data)

df['coddpto'] = df['ubigeo'].str[:2]

print(df)
```

**Mediante el método `.str.split()`**
```{python}
# Crear DataFrame de ejemplo
data = {
    'documento': ['abc-123"xyz', 'def-456"uvw', 'ghi-789"rst']
}
df = pd.DataFrame(data)

# Dividir la columna 'documento' en múltiples columnas usando los delimitadores '-' y '"'
split_columns = df['documento'].str.split('[-"]', expand=True)

print(split_columns)

# Renombrar las nuevas columnas
split_columns.columns = ['doc1', 'doc2', 'doc3']

# Combinar con el DataFrame original si es necesario
df = df.join(split_columns)

print(df)
```

**Mediante el operar `+`**
```{python}
# Crear DataFrame de ejemplo
data = {
    'doc1': ['abc', 'def', 'ghi'],
    'doc2': ['123', '456', '789']
}
df = pd.DataFrame(data)

# Concatenar las columnas 'doc1' y 'doc2' con '/' entre ellas
df['doc3'] = df['doc1'] + '/' + df['doc2']

print(df)
```

### Crear variables dummy a partir de condiciones

```{python}
import pandas as pd

data = {
    "name": ["Bella", "Charlie", "Lucy", "Cooper", "Max", "Stella", "Bernie"],
    "breed": ["Labrador", "Poodle", "Chow Chow", "Schnauzer", "Labrador", "Chihuahua", "St. Bernard"],
    "color": ["Brown", "Black", "Brown", "Gray", "Black", "Tan", "White"],
    "height_cm": [56, 43, 46, 49, 59, 18, 77],
    "weight_kg": [24, 24, 24, 17, 29, 2, 74],
    "date_of_birth": ["2013-07-01", "2016-09-16", "2014-08-25", "2011-12-11", "2017-01-20", "2015-04-20", "2018-02-27"]
}

df = pd.DataFrame(data, index=["obs1", "obs2", "obs3", "obs4", "obs5", "obs6", "obs7"])

print(df)

condition = df['weight_kg'] > 23
print("\n", condition)

df['condition'] = condition
print("\n", df)

df['sobrepeso'] = condition.astype(int) # 'int' también funciona
print(df)
```

## Subconjuntos de columnas (mediante el operador `[]`)

### Base de datos de prueba
```{python}
data = {
    "name": ["Bella", "Charlie", "Lucy", "Cooper", "Max", "Stella", "Bernie"],
    "breed": ["Labrador", "Poodle", "Chow Chow", "Schnauzer", "Labrador", "Chihuahua", "St. Bernard"],
    "color": ["Brown", "Black", "Brown", "Gray", "Black", "Tan", "White"],
    "height_cm": [56, 43, 46, 49, 59, 18, 77],
    "weight_kg": [24, 24, 24, 17, 29, 2, 74],
    "date_of_birth": ["2013-07-01", "2016-09-16", "2014-08-25", "2011-12-11", "2017-01-20", "2015-04-20", "2018-02-27"]
}

df = pd.DataFrame(data, index=["obs1", "obs2", "obs3", "obs4", "obs5", "obs6", "obs7"])

print(df)
```

### Subconjunto de una sola columna

Devolviendo una Series como subconjunto:
```{python}
df['breed']
type(df['breed'])
```

Devolviendo un DataFrame como subconjunto:
```{python}
df[['breed']]
type(df[['breed']])
```

### Subconjunto de más de una columna
```{python}
df[['name', 'weight_kg']]
```

::: {.callout-note}
No funciona segmentación (slicing) con el operador `[]`.
:::

### Subconjuntos según el tipo de dato

Estos tipos de datos pueden ser específicos como int64, float64, bool, datetime64, timedelta, category, entre otros, o pueden ser categorías generales como number, object, o datetime.

```{python}
df.select_dtypes(include='number')
```

```{python}
df.select_dtypes(include='object')
```

### Subconjunto según patrones en los nombres de las columnas

```{python}
data = {
    'var1': [1, 2, 3],
    'var2': [4, 5, 6],
    'other_var': [7, 8, 9],
    'variable': [10, 11, 12]
}
df = pd.DataFrame(data)

var_columns = [col for col in df.columns if col.startswith('var')]

df[var_columns]
```

## Ordenando columnas

Ordenando una columna cualquiera como primera columna:
```{python}
column_order = ['breed'] + [columna for columna in df.columns if columna != 'breed']
df = df[column_order]
print(df)
```

Ordenando una columna culquiera como última columna:
```{python}
column_order = [columna for columna in df.columns if columna != 'weight_cm'] + ['weight_cm']

df = df[column_order]

print(df)
```

# index

## Base de datos de prueba

```{python}
import pandas as pd

data = {
    "name": ["Bella", "Charlie", "Lucy", "Cooper", "Max", "Stella", "Bernie"],
    "breed": ["Labrador", "Poodle", "Chow Chow", "Schnauzer", "Labrador", "Chihuahua", "St. Bernard"],
    "color": ["Brown", "Black", "Brown", "Gray", "Black", "Tan", "White"],
    "height_cm": [56, 43, 46, 49, 59, 18, 77],
    "weight_kg": [24, 24, 24, 17, 29, 2, 74],
    "date_of_birth": ["2013-07-01", "2016-09-16", "2014-08-25", "2011-12-11", "2017-01-20", "2015-04-20", "2018-02-27"]
}

df = pd.DataFrame(data, index=["obs1", "obs2", "obs3", "obs4", "obs5", "obs6", "obs7"])

print(df)
```

## Accediendo a los índices
```{python}
df.index
```
Se proporcionaron índices numéricos como un `RangeIndex` por defecto.

## Renombrar los índices

Mediante el atributo `.index`
```{python}
df.index = ['Obs_1', 'Obs_2', 'Obs_3', 'Obs_4', 'Obs_5', 'Obs_6', 'Obs_7']

print(df.index)
print(df)
```

## Establecer índices

Crear índices a partir de una columna
```{python}
df = df.set_index("breed")

print(df.index)
print(df)
```

Crear Índices de Niveles Múltiples
```{python}
df = df.set_index(["name", "color"])
print(df)
```

## Eliminar el index
```{python}
df.reset_index(inplace=True)
print(df)
```

Eliminar un Índice Sin Guardar:
```{python}
import pandas as pd

data = {
    "name": ["Bella", "Charlie", "Lucy", "Cooper", "Max", "Stella", "Bernie"],
    "breed": ["Labrador", "Poodle", "Chow Chow", "Schnauzer", "Labrador", "Chihuahua", "St. Bernard"],
    "color": ["Brown", "Black", "Brown", "Gray", "Black", "Tan", "White"],
    "height_cm": [56, 43, 46, 49, 59, 18, 77],
    "weight_kg": [24, 24, 24, 17, 29, 2, 74],
    "date_of_birth": ["2013-07-01", "2016-09-16", "2014-08-25", "2011-12-11", "2017-01-20", "2015-04-20", "2018-02-27"]
}

df = pd.DataFrame(data, index=["obs1", "obs2", "obs3", "obs4", "obs5", "obs6", "obs7"])

print(df)

df.reset_index(drop=True, inplace=True)

print(df)
```

```{python}
import pandas as pd

data = {
    "name": ["Bella", "Charlie", "Lucy", "Cooper", "Max", "Stella", "Bernie"],
    "breed": ["Labrador", "Poodle", "Chow Chow", "Schnauzer", "Labrador", "Chihuahua", "St. Bernard"],
    "color": ["Brown", "Black", "Brown", "Gray", "Black", "Tan", "White"],
    "height_cm": [56, 43, 46, 49, 59, 18, 77],
    "weight_kg": [24, 24, 24, 17, 29, 2, 74],
    "date_of_birth": ["2013-07-01", "2016-09-16", "2014-08-25", "2011-12-11", "2017-01-20", "2015-04-20", "2018-02-27"]
}

df = pd.DataFrame(data)

print(df)

df.reset_index(drop=True, inplace=True)

print(df)
```

## Ordenar índices
```{python}
import pandas as pd

data = {
    "name": ["Bella", "Charlie", "Lucy", "Cooper", "Max", "Stella", "Bernie"],
    "breed": ["Labrador", "Poodle", "Chow Chow", "Schnauzer", "Labrador", "Chihuahua", "St. Bernard"],
    "color": ["Brown", "Black", "Brown", "Gray", "Black", "Tan", "White"],
    "height_cm": [56, 43, 46, 49, 59, 18, 77],
    "weight_kg": [24, 24, 24, 17, 29, 2, 74],
    "date_of_birth": ["2013-07-01", "2016-09-16", "2014-08-25", "2011-12-11", "2017-01-20", "2015-04-20", "2018-02-27"]
}

df = pd.DataFrame(data, index=["obs2", "obs3", "obs4", "obs5", "obs6", "obs7", "obs1"])

print(df)

df.sort_index(inplace=True)

print(df)
```

```{python}
df.sort_index(level=["color", "breed"], ascending=[True, False])
```

## Subconjuntos de Filas (mediante conditiones)

### Condiciones Simples

Se crea una máscara de booleanos:
```{python}
condition = df["height_cm"] > 50

print(condition)
```

Esta máscara de booleanos se aplica al DataFrame para filtrar filas:
```{python}
print(df[condition])

print(df[df['height_cm'] > 50])
```

Condiciones de Texto

```{python}
print(df[df["breed"] == "Labrador"])
```

Condiciones de Fecha

```{python}
print(df[df["date_of_birth"] < "2015-01-01"])
```

### Múltiples Condiciones

```{python}
is_lab = df["breed"] == "Labrador"
is_brown = df["color"] == "Brown"
print(df[is_lab & is_brown])
```

Usando .isin()

```{python}
is_black_or_brown = df["color"].isin(["Black", "Brown"])
print(df[is_black_or_brown])
```

# Valores

## Acceder a los valores
```{python}
df.values
```

## Reemplazar valores

Mediante el método `.replace()`
```{python}
df['var'] = df['var'].replace({999999: np.nan})
```

Mediante el atributo `.loc`
```{python}
condicion = (df['gpm'] > df['linpe']) & (df['gpm'] <= df['linea'])
df.loc[condicion, 'pobre'] = 2
```

## Variables categóricas

### Crear variables categóricas
Pandas también permite manejar etiquetas de valores utilizando tipos de datos categóricos:

```python
import pandas as pd

# Ejemplo de DataFrame
data = {
    'pobreza': [0, 1, 0, 1, 1, 0]
}
df = pd.DataFrame(data)

# Definir las categorías y sus etiquetas
df['pobreza'] = df['pobreza'].astype('category')
df['pobreza'].cat.categories = ["integrado", "coyuntural"]

print(df)
print(df['pobreza'].cat.categories)
```

Este enfoque convierte la variable `pobreza` en una variable categórica y asigna etiquetas directamente a las categorías.

### Crear columnas categóricas a partir de columnas de cadenas de caracteres

```{python}
import pandas as pd
data = {
    'tipodezona': ['urbana', 'rural', 'urbana', 'suburbana', 'rural']
}
df = pd.DataFrame(data)

# Convertir la columna 'tipodezona' a categórica y crear la columna numérica 'tipo'
df['tipodezona'] = df['tipodezona'].astype('category')
df['tipo'] = df['tipodezona'].cat.codes

print(df)
print(df['tipodezona'].cat.categories)  # Mostrar las categorías originales
```

### Recodificar una variable categórica

```{python}
import pandas as pd

# Crear DataFrame de ejemplo
data = {
    'tipo': [1, 2, 1, 2, 1]
}
df = pd.DataFrame(data)

# Definir el diccionario de recodificación
recode_dict = {
    1: {'zona': 0, 'label': 'Area rural'},
    2: {'zona': 1, 'label': 'Area urbana'}
}

# Recodificar la columna 'tipo' y crear la nueva columna 'zona'
df['zona'] = df['tipo'].replace({key: value['zona'] for key, value in recode_dict.items()})

# Mostrar el resultado
print(df)

# Mostrar las etiquetas originales para referencia
for key, value in recode_dict.items():
    print(f"{key}: {value['label']}")
```

### Decodificar una variable categóricas a sus valores numéricos
```{python}
import pandas as pd

# Crear DataFrame de ejemplo
data = {
    'tipodezona': ['urbana', 'rural', 'urbana', 'suburbana', 'rural']
}
df = pd.DataFrame(data)

# Convertir la columna 'tipodezona' a categórica y crear la columna numérica 'tipo'
df['tipodezona'] = df['tipodezona'].astype('category')
df['tipo'] = df['tipodezona'].cat.codes

print(df)
print(df['tipodezona'].cat.categories)  # Mostrar las categorías originales
```

## Convertir tipo de dato de los valores

### Tipos de datos

En pandas, las Series y DataFrames pueden contener diferentes tipos de datos. Aquí tienes una lista de los tipos de datos más comunes que puedes encontrar en pandas:

Tipos de Datos Básicos:

1. **int64**: Enteros de 64 bits.
2. **float64**: Números de punto flotante de 64 bits.
3. **bool**: Valores booleanos (`True` o `False`).
4. **object**: Generalmente usado para datos de tipo cadena (strings). Puede contener cualquier objeto de Python.
5. **category**: Datos categóricos que pueden tomar un número limitado de valores posibles. Este tipo de datos es útil para variables cualitativas.

Tipos de Datos Temporales

1. **datetime64[ns]**: Datos de fecha y hora con precisión de nanosegundos.
2. **timedelta[ns]**: Diferencias de tiempo con precisión de nanosegundos.
3. **Period**: Períodos de tiempo, como años, meses o días.

Otros Tipos de Datos

1. **Int64**: Enteros que permiten valores nulos (NA). Esto se introduce en pandas para manejar mejor los datos faltantes en columnas de enteros.
2.  **Float32**: Números de punto flotante de 32 bits.
3.  **Float16**: Números de punto flotante de 16 bits.
4.  **complex**: Números complejos.

Conversión de Tipos de Datos

Pandas también proporciona funciones para convertir entre tipos de datos. Algunas funciones comunes incluyen:

- `pd.to_numeric()`: Convertir a tipos numéricos (int, float).
- `pd.to_datetime()`: Convertir a tipos de datos de fecha y hora.
- `astype()`: Convertir a un tipo de datos específico.

### Mediante el método `to_numeric()`
```{python}
import pandas as pd

# Crear DataFrame de ejemplo con una columna de cadena
data = {
    'coddpto': ['15', '12', '01', 'NA', '15']
}
df = pd.DataFrame(data)

# Convertir la columna 'coddpto' de cadena a numérica
df['coddpto'] = pd.to_numeric(df['coddpto'], errors='coerce')

print(df)
```

### Mediante el método `as_type()`
```{python}
import pandas as pd

# Crear un DataFrame de ejemplo
data = {
    'edad': [25, 30, 35, 40],
    'ingreso': [50000.50, 75000.75, 60000.25, 90000.90]
}
df = pd.DataFrame(data)

# Convertir la columna 'edad' a cadena (string)
df['edad_str'] = df['edad'].astype(str)

# Convertir la columna 'ingreso' a cadena (string) con dos decimales
df['ingreso_str'] = df['ingreso'].apply(lambda x: f"{x:.2f}")

print(df)
```

## Formatear valores

### De una columna
```{python}
data = {
    'doc5': [123456789, 987654321, 12345]
}
df = pd.DataFrame(data)

# Formatear la columna 'doc5' para que tenga un campo de 15 caracteres de ancho sin decimales
df['doc5_formatted'] = df['doc5'].apply(lambda x: f"{x:15.0f}")

print(df)
```

### De más de una columna
```{python}
pd.set_option('display.float_format', lambda x: '%.3f' % x)
```

## Ordenar Valores

### Orden Ascendente

```{python}
print(dogs.sort_values("weight_kg"))
```

### Orden Descendente

```{python}
print(dogs.sort_values("weight_kg", ascending=False))
```

### Ordenar por Múltiples Variables
```{python}
print(dogs.sort_values(["weight_kg", "height_cm"]))
```

```{python}
print(dogs.sort_values(["weight_kg", "height_cm"], ascending=[True, False]))
```

## Segmentación y Subconjuntos con `.loc` y `.iloc`

### Recordemos la Segmentación de Listas
```{python}
breeds = ["Labrador", "Poodle", "Chow Chow", "Schnauzer", "Labrador", "Chihuahua", "St. Bernard"]
breeds[2:5]
breeds[:3]
breeds[:]
breeds["Poodle": "Labrador"]
```

### Base de datos de prueba
```{python}
import pandas as pd

data = {
    "name": ["Bella", "Charlie", "Lucy", "Cooper", "Max", "Stella", "Bernie"],
    "breed": ["Labrador", "Poodle", "Chow Chow", "Schnauzer", "Labrador", "Chihuahua", "St. Bernard"],
    "color": ["Brown", "Black", "Brown", "Gray", "Black", "Tan", "White"],
    "height_cm": [56, 43, 46, 49, 59, 18, 77],
    "weight_kg": [24, 24, 24, 17, 29, 2, 74],
    "date_of_birth": ["2013-07-01", "2016-09-16", "2014-08-25", "2011-12-11", "2017-01-20", "2015-04-20", "2018-02-27"]
}

df = pd.DataFrame(data)

print(df)
```

### Ordenar el Índice Antes de Segmentar
```{python}
df.set_index(["breed", "color"], inplace=True)
print(df)
df.sort_index(inplace=True)
print(df)
```

### Segmentación del Nivel Exterior del Índice
```{python}
df.loc["Chow Chow":"Poodle"]
```

### Segmentación de Niveles Internos incorrectamente
```{python}
df.loc["Brown":"Grey"]
```

### Segmentación de Niveles Internos Correctamente
```{python}
df.loc[("Labrador", "Brown"):("Schnauzer", "Grey")]
```

### Segmentación de Columnas

::: {.callout-note}
No requiere que las columnas estén ordenadas alfanuméricamente. Aunque se podría ordenar con el método `.sort_index(axis=1, inplace=True)`.
:::

```{python}
df.loc[:, "name":"height_cm"]
```

### Segmentación de filas y columnas a la vez
```{python}
df.loc[("Labrador", "Brown"):("Schnauzer", "Grey"),"name":"height_cm"]
```

### Subconjuntos con Valores de Índice Duplicados

```{python}
import pandas as pd

data = {
    "name": ["Bella", "Charlie", "Lucy", "Cooper", "Max", "Stella", "Bernie"],
    "breed": ["Labrador", "Poodle", "Chow Chow", "Schnauzer", "Labrador", "Chihuahua", "St. Bernard"],
    "color": ["Brown", "Black", "Brown", "Gray", "Black", "Tan", "White"],
    "height_cm": [56, 43, 46, 49, 59, 18, 77],
    "weight_kg": [24, 24, 24, 17, 29, 2, 74],
    "date_of_birth": ["2013-07-01", "2016-09-16", "2014-08-25", "2011-12-11", "2017-01-20", "2015-04-20", "2018-02-27"]
}

df = pd.DataFrame(data)

print(df)

df= df.set_index("breed")
print(df)

df.loc["Labrador"]
```

### Subconjuntos con índices jerárquicos

Base de datos de prueba
```{python}
import pandas as pd

data = {
    "name": ["Bella", "Charlie", "Lucy", "Cooper", "Max", "Stella", "Bernie"],
    "breed": ["Labrador", "Poodle", "Chow Chow", "Schnauzer", "Labrador", "Chihuahua", "St. Bernard"],
    "color": ["Brown", "Black", "Brown", "Gray", "Black", "Tan", "White"],
    "height_cm": [56, 43, 46, 49, 59, 18, 77],
    "weight_kg": [24, 24, 24, 17, 29, 2, 74],
    "date_of_birth": ["2013-07-01", "2016-09-16", "2014-08-25", "2011-12-11", "2017-01-20", "2015-04-20", "2018-02-27"]
}

df = pd.DataFrame(data)
df.set_index(['breed', 'color'], inplace=True)

print(df)
```

Subconjuntos del Nivel Exterior con una Lista
```{python}
df.loc[["Labrador", "Chihuahua"]]
```

Subconjuntos de Niveles Internos con una Lista de Tuplas
```{python}
df.loc[[("Labrador", "Brown"), ("Chihuahua", "Tan")]]
```

### Segmentación con fechas

Ordenamos el índice:
```{python}
df = df.set_index("date_of_birth").sort_index()
print(df)
```

Segmentamos:
```{python}
# Get df with date_of_birth between 2014-08-25 and 2016-09-16
df.loc["2014-08-25":"2016-09-16"]
```

Segmentación por fechas parciales
```{python}
# Get df with date_of_birth between 2014-01-01 and 2016-12-31
df.loc["2014":"2016"]
```

### Subconjuntos por número de filas/columnas
```{python}
print(dogs.iloc[2:5, 1:4])
```