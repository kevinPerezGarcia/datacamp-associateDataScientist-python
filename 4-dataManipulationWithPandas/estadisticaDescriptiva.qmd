---
title: "Estadística descriptiva"
author: "Kevin Pérez García"
---

# Librerías
```{python}
import numpy as np
import pandas as pd
```

# Base de datos de prueba

Asumiendo la existencia de un DataFrame:

```{python}
data = {
    "name": ["Bella", "Charlie", "Lucy", "Cooper", "Max", "Stella", "Bernie"],
    "breed": ["Labrador", "Poodle", "Chow Chow", "Schnauzer", "Labrador", "Chihuahua", "St. Bernard"],
    "color": ["Brown", "Black", "Brown", "Gray", "Black", "Tan", "White"],
    "height_cm": [56, 43, 46, 49, 59, 18, 77],
    "weight_kg": [24, 24, 24, 17, 29, 2, 74],
    "date_of_birth": ["2013-07-01", "2016-09-16", "2014-08-25", "2011-12-11", "2017-01-20", "2015-04-20", "2018-02-27"]
}

df = pd.DataFrame(data)
print(df)
```

# Estadística descriptiva

La estadística descriptiva consiste en resumir información contenida en una base de datos. Estos resúmenes se pueden presentar de 3 formas:
* Numérica vía estadísticos descriptivos
* Tabular
* Gráfica

Además estos resúmenes son específicos para el tipo de variable (numérica, categórica, fecha, mixta). Veremos cada una de estas formas de resumir según el tipo de variable (numérica, categórica, temporal, mixta) en las siguientes secciones.

# Forma numérica - variables numéricas

## Estadísticas no acumulativas

De manera general:
```{python}
print(df.describe())
```

Los siguientes aplican sobre DataFrames de variables numéricas.

Medidas de posición central:

```{python}
df.select_dtypes(include='number').mean()
```

```{python}
print(df["height_cm"].mean())
print(df["height_cm"].median())
print(df["height_cm"].mode())
```

Medidas de dispersión:
```{python}
df["height_cm"].var()
df["height_cm"].std()
df["height_cm"].min()
df["height_cm"].max()
```

Medidas de posición:
```{python}
df["height_cm"].quantile()
```

Otras medidas:
```{python}
df["height_cm"].sum()
```

De variables temporales:
```{python}
df["date_of_birth"].min() # Fecha más antigua
df["date_of_birth"].max() # Fecha más reciente
```

## Estadísticas Acumulativas

Suma Acumulativa
```{python}
df["weight_kg"].cumsum()
```
Otros Métodos Acumulativos
```{python}
df["weight_kg"].cummax()
df["weight_kg"].cummin()
df["weight_kg"].cumprod()
```

## Métodos de Agregación `.agg()`

```{python}
df[["weight_kg", "height_cm"]].agg(['mean', 'median'])
```

Con funciones personalizadas
```{python}
def pct30(column):
    return column.quantile(0.3)

df["weight_kg"].agg(pct30)
```

# Forma tabular

## De una variable categórica

### Distribución de frecuencia absoluta
```{python}
unique_df["breed"].value_counts()
```
### Distribución de frecuencia relativa
```{python}
unique_df["breed"].value_counts(normalize=True)
```

## De variables categóricas y numéricas - Resumen por grupos

```{python}
df.groupby("color")["weight_kg"].mean()
```

Resúmenes agrupados múltiples
```{python}
df.groupby("color")["weight_kg"].agg([min, max, sum])
```

Resúmenes por múltiples grupos
```{python}
df.groupby(["color", "breed"])["weight_kg"].mean()
```

Muchos grupos, muchos resúmenes
```{python}
df.groupby(["color", "breed"])[["weight_kg", "height_cm"]].mean()
```

```{python}
df.groupby(["color", "breed"])[["weight_kg", "height_cm"]].agg([min, max, sum])
```

```{python}
df.groupby('breed').agg({
    'height_cm': 'mean',
    'weight_kg': 'median',
})#.reset_index()
```

## De variables categóricas - Tabla de contingencia

```{python}
pd.crosstab(df['breed'], df['color'])
pd.crosstab(df['breed'], df['color'], margins=True)
```

Tabla de contingencia donde las frecuencias están expresadas como porcentajes por fila
```{python}
pd.crosstab(df['breed'], df['color'], normalize='index') * 100
pd.crosstab(df['breed'], df['color'], normalize='index', margins=True) * 100
```

Tabla de contingencia donde las frecuencias están expresadas como porcentajes por columna
```{python}
pd.crosstab(df['breed'], df['color'], normalize='columns') * 100
pd.crosstab(df['breed'], df['color'], normalize='columns', margins=True) * 100
```

Tabla de contingencia donde las frecuencias están expresadas como porcentajes del total
```{python}
pd.crosstab(df['breed'], df['color'], normalize='all') * 100
pd.crosstab(df['breed'], df['color'], normalize='all', margins=True) * 100
```

## Tablas dinámicas (pivot tables)

```{python}
import numpy as np
```

De groupby() a pivot_table()
```{python}
df.groupby("color")["weight_kg"].mean()
```

```{python}
df.pivot_table(values="weight_kg", index="color")
```
Estadística diferente
```{python}
df.pivot_table(values="weight_kg", index="color", aggfunc=np.median)
```
Estadísticas Múltiples
```{python}
df.pivot_table(values="weight_kg", index="color", aggfunc=[np.mean, np.median])
```
Tablas Dinámicas con Dos Variables
```{python}
df.pivot_table(values="weight_kg", index="color", columns="breed")
```
Rellenando Valores Faltantes
```{python}
df.pivot_table(values="weight_kg", index="color", columns="breed", fill_value=0)
```
Suma en Tablas Dinámicas
```{python}
df.pivot_table(values="weight_kg", index="color", columns="breed", fill_value=0, margins=True)
```

```{python}
df.pivot_table(values="weight_kg", index="color", columns="breed", fill_value=0, margins=True, aggfunc=[np.mean, np.median])
```